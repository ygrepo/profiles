snippet shebang "shebang #!"
#!/usr/local/bin/python3
endsnippet


# Tests

snippet context.py "contents of context.py file"
import os, sys
sys.path.insert(
    0,
    os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    )

import ${1:name_of_module}
endsnippet
snippet fixture "pytest fixture"
@pytest.fixture
def $1($2):
    # TODO make $1 fixture
    $3
    return $1
endsnippet

snippet test "pytest test function"
def test_$1(${2:fixture}):
    #TODO write test
    $3
    assert 0 == 1
endsnippet

snippet loadyaml "load yaml"
with open("$1", 'r') as stream:
    try:
        yaml.safe_load(stream)
    except yaml.YAMLError as exc:
        print(exc)
endsnippet

snippet function "def .. return function"
def $1($2):
    # TODO write $1
    pass
endsnippet

# OS
snippet ls "ls"
os.listdir('${1:filepath}')
endsnippet
# Docs

snippet class_docstring, "docstring before class ___:"
    '''
    ${1:# TODO Short Description of Class}

    Attributes
    ----------
    ${2:attribute_name}: ${3:type},default,${4:None}
	${5:# TODO Write description for $2}

    '''
endsnippet

# Data Science Stuff

snippet importds "Import pd np plt sns"
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
endsnippet

# Matplotlib

snippet figure "matplotlib figure"
fig = plt.figure(figsize=(10, 10))
ax = plt.axes()

$7

ax.set(
    xlim=${2:None},
    ylim=${3:None},
    xlabel='$4',
    ylabel='$5',
    title='$6'
)

fig.savefig('${1:figure_name}.png')
endsnippet

snippet subplots "matplotlib subplots"
fig, ax = plt.subplots(${1:n_rows}, ${2:n_columns})
endsnippet

snippet plot "matplotlib plot"
${1:ax}.plot(
    ${2:x_axis},
    ${3:y_axis},
)
endsnippet

snippet scatter "matplotlib scatter"
${1:ax}.scatter(
    ${2:x_axis},
    ${3:y_axis},
    marker='${4:o}',
    c=${5:None}, # color values of each dot
    s=${6:None}, # sizes of each dot
    alpha=${7:1}, # opacity of dots
    cmap=${8:'BrBG'} # color map
)
endsnippet

snippet histogram "matplotlib histogram"
${1: ax}.hist(
    ${2:x},
    bins=${3:n_bins}, 
    density=${4:True}
    )
$5
endsnippet


snippet correlations_plot "plot correlation matrix"
fig = plt.figure(figsize=(12, 12))
corr = np.round(${1:DATAFRAME}.corr(), decimals=2)
mask = np.triu(np.ones_like(corr, dtype=np.bool), k=1)
sns.heatmap(corr,
            mask=mask,
            cmap='RdBu',
            vmin=-1,
            vmax=1,
            linewidths=3,
            square=True,
            cbar=False,
            annot=True
	    )
plt.tick_params(labelrotation=45)
plt.title('(Pearson) Correlations of ${2:DESCRIPTION}', fontdict={'fontsize': 30})
endsnippet

# Streamlit

snippet stselectbox "streamlit selectbox"
st.selectbox(
    label='$1',
    options=$2,
    index=${3:1}
)
$4
endsnippet

snippet stmultiselectbox "streamlit multiselectbox"
st.multiselect(
    label='$1',
    options=$2,
    default=$3,
)
$4
endsnippet
# General Python Stuff

# Argparser

snippet argumentparser "create argument parser object"
parser = argparse.ArgumentParser()
endsnippet

snippet optional_argument "add argument to argparser"
parser.add_argument(
    '--${1:flag_name}',
    action='${2:store_const}',
    const=${3:True},
    default=${4:False},
    dest='${5:argument_attribute_name}',
    help='${6:description for --help}'
)
endsnippet

snippet parser_args "gets arguments from argument parser"
args = parser.parse_args()
endsnippet


